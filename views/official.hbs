<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
    integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
    crossorigin="" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
    integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
    crossorigin=""></script>
<script src="/js/au-state.js"></script>

{{!--
<script src="\js\jquery-3.6.0.min.js"></script> --}}
<link rel="stylesheet" href="/css/public.css">


{{!-- main body --}}
<div id="mapid"></div>

{{!-- search area --}}
<section class="top">
    <h3>Official Data</h3>
    <form action="/official/basicSearch" method="POST" id="selection">
        <select id="select-state" class="form-select" name="state">
            <option value="null">Select state</option>
            <option value="VIC">Victoria</option>
            <option value="WA">Western Australia</option>
            <option value="NSW">New South Wales</option>
            <option value="TAS">Tasmania</option>
            <option value="ACT">Australian Capital Territory</option>
            <option value="QLD">Queensland</option>
            <option value="SA">South Australia</option>
            <option value="NT">Northern Territory</option>
        </select>
        <button type="submit" class="search-btn"><i class="bi bi-search"></i></button>


        {{!-- <div class="expand-button">
            <a href="#">
                <h5>Accurate search</h5>
            </a>
        </div> --}}

        <div class="expand-show">
            <div class="form-group">
                <label for="searchCity" value="null">City/Region: </label>
                <input id="searchCity" class="form-control" name="searchCity" type="text"
                    onkeyup="fetchCity(this)"></input>
            </div>

            <div class="form-group">
                <label for="searchPlace" value="null">Place name: </label>
                <input id="searchPlace" class="form-control" name="searchPlace" type="text"
                    onkeyup="fetchPlaceName(this)"></input>
            </div>


            <section id="searchResultsCity" class="container d-flex flex-column"></section>
            <section id="searchResultsPlaceName" class="container d-flex flex-column"></section>
        </div>




    </form>
    {{#if alert}}
    <p>{{alert}}</p>
    {{/if}}


    <form action="/official/clear" method="GET" id="clear">
        <button type="submit">Clear</button>
    </form>
</section>




<div class='container'>
    <h3>Data Table</h3>
    <div class='d-flex flex-row justify-content-around align-items-center advance-selections'>
        <div>
            <section class="row">
                {{#if selected}}
                <p> <b>Advanced search: </b>
                </p>
                {{/if}}
            </section>

            <form action="/official/advanceSearch" method="POST" id="order">
                {{#if selected}}
                <dl class="filter-order">
                    <dt>Order by: </dt>

                    <dd>
                        <label><input onclick="javascript:jump('/official/advanceSearch');" type="radio" name="orderBy"
                                value="city">City/Region</label>
                        <label><input onclick="javascript:jump('/official/advanceSearch');" type="radio" name="orderBy"
                                value="name">Place</label>
                        <label><input onclick="javascript:jump('/official/advanceSearch');" type="radio" name="orderBy"
                                value="quality">Water Quality</label>
                    </dd>

                </dl>
                {{/if}}
            </form>

            <dl id="filterLevel">
                {{#if selected}}
                <dt>Level: </dt>
                <dd>
                    <label><input onclick="showByLevel(this)" type="checkbox" name="level1">Level 1</label>
                    <label><input onclick="showByLevel(this)" type="checkbox" name="level2">Level 2</label>
                    <label><input onclick="showByLevel(this)" type="checkbox" name="level3">Level 3</label>
                    <label><input onclick="showByLevel(this)" type="checkbox" name="level4">Level 4</label>
                </dd>
                {{/if}}
            </dl>
        </div>

        <section class="d-flex flex-column">
            {{#if selected}}
            <p><b>Water Level Description</b></p>
            <label class="level1">Level 1: Best water quality</label>
            <label class="level2">Level 2: Moderate water quality with 1 unqualified indicator</label>
            <label class="level3">Level 3: Poor water quality with 2 unqualified indicators</label>
            <label class="level4">Level 4: Worst water quality with 3 unqualified indicators</label>
            <br>
            <label>Indicators: Temperature, pH and Water Conductivity</label>
            {{/if}}
        </section>
    </div>



    {{#if results}}

    <div id="results-table">

        <div class="row align-items-center main-title">
            <div class="col">
                State
            </div>
            <div class="col">
                City/Region
            </div>
            <div class="col">
                Place Name
            </div>
            <div class="col">
                Date
            </div>
            <div class="col">
                Level
            </div>
        </div>

        {{#each results}}
        <div class="row align-items-center main-info">
            <div class="col">
                {{state}}
            </div>
            <div class="col">
                {{#if city}}
                {{city}}
                {{else}}
                Unknown
                {{/if}}
            </div>
            <div class="col">
                {{placeName}}
            </div>
            <div class="col">
                {{date}}
            </div>
            <div class="col level{{level}}">
                {{level}}
            </div>
        </div>

        <div class="row align-items-center detail-info detail-title">
            <div class="col latitude">
                Latitude
            </div>
            <div class="col longitude">
                Longitude
            </div>
            <div class="col electricalConductivity">
                Electrical conductivity
            </div>
            <div class="col pH">
                pH
            </div>
            <div class="col temperature">
                Temperature
            </div>
            <div class="col totalDissolvedSolids">
                Total dissolved solids
            </div>
            <div class="col waterTurbidity">
                Water turbidity
            </div>
        </div>
        <div class="row align-items-center detail-info">

            <div class="col latitude">
                {{latitude}}
            </div>
            <div class="col longitude">
                {{longitude}}
            </div>

            <div class="col electricalConductivity">
                {{electricalConductivity}}
            </div>
            <div class="col pH">
                {{pH}}
            </div>
            <div class="col temperature">
                {{temperature}}
            </div>
            <div class="col totalDissolvedSolids">
                {{totalDissolvedSolids}}
            </div>
            <div class="col waterTurbidity">
                {{waterTurbidity}}
            </div>
        </div>
        {{/each}}
        {{/if}}

    </div>
</div>

<script language="javascript">

    /* record scroll offset*/
    $(window).scroll(function () {
        if ($(document).scrollTop() != 0) {
            var offset = $(window).scrollTop();
            localStorage.setItem("offsetTop", offset);
        }
    });

    /* to submit form */
    function jump(url) {
        order.action = url;
        order.method = "POST";
        order.submit();
        /*
        // get ordered data, used with res.send(results); in officialController.js
        $.ajax({
            type: "POST",
            data: $('#order').serialize(),
            url: url,
            success: function (data) {
                console.log(data);
                results = data.results
                console.log(results);
            },
            error: function (err) {
                console.log(err.msg);
            }
        })*/
    }

    /* to submit form */
    function jump(url, data) {
        order.action = url;
        order.method = "POST";
        order.submit();
    }

    // scroll to offset
    var offset = localStorage.getItem("offsetTop");

    $("HTML, BODY").animate({
        scrollTop: offset
    }, 0);


    /* -----------------------------------------------------for show and hide level -----------------------------------------------------------------------*/
    function showByLevel(e) {
        // hide all data in chart
        $(".main-info").hide();
        // for marker
        $("img.leaflet-marker-icon").hide();

        let levels = e.parentElement.parentElement;
        let count = e.parentElement.parentElement.childElementCount;
        let checked = false;
        for (let i = 0; i < count; i++) {
            let level = levels.children[i].children[0];
            let levelName;
            if (level.checked) {
                levelName = '.' + level.name;
                $(levelName).parent().show();
                $("img" + levelName).show();
                checked = true;
            }
        }

        if (!checked) {
        // show all data in chart
        $(".main-info").show();
        // show all marker
        $("img.leaflet-marker-icon").show();
        }
    }


    /* -----------------------------------------------------restore selected content -----------------------------------------------------------------------*/

    let selected = "{{selected}}";
    if (selected != "") {
        const state = "{{selected.state}}"
        const searchCity = "{{selected.searchCity}}"
        const searchPlace = "{{selected.searchPlace}}"
        const orderBy = "{{selected.orderBy}}"

        if (state != "") {
            let selectedState = document.querySelector(`option[value=${state}]`);
            selectedState.selected = true;
        }

        if (searchCity != "") {
            let selectedCity = document.querySelector(`input[name="searchCity"]`);
            selectedCity.value = searchCity;
        }

        if (searchPlace != "") {
            let selectedCity = document.querySelector(`input[name="searchPlace"]`);
            selectedCity.value = searchPlace;
        }

        if (orderBy != "") {
            let city = document.querySelector('input[value="city"]');
            let placeName = document.querySelector('input[value="name"]');
            let quality = document.querySelector('input[value="quality"]');

            switch (orderBy) {
                case "city":
                    city.checked = true;
                    break;
                case "name":
                    placeName.checked = true;
                    break;
                case "quality":
                    quality.checked = true;
                    break;
            }
        }
    }

    function fetchCity(e) {
        const searchResults = document.getElementById("searchResultsCity");
        const selectedState = document.getElementById("select-state").value;
        let match1 = e.value.match(/^[a-zA-Z ]*/);
        let match2 = e.value.match(/\s*/);
        if (match2[0] === e.value) {
            searchResults.innerHTML = "";
            return;
        }
        if (match1[0] === e.value) {
            fetch('getCity', {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ payload: e.value, state: selectedState })
            }).then(res => res.json()).then(data => {
                let payload = data.payload;
                searchResults.innerHTML = "";
                if (payload.length < 1) {
                    searchResults.innerHTML = "<p>Sorry, nothing found.</p>";
                    return;
                }
                payload.forEach((item, index) => {
                    searchResults.innerHTML += `<p class="cityOptions" id="option-${item.city}" onclick = "sendCityValue(this.id)">${item.city}</p>`;
                });
            });
            return;
        }
        searchResults.innerHTML = "";
    }

    function fetchPlaceName(e) {
        const searchResults = document.getElementById("searchResultsPlaceName");
        const selectedState = document.getElementById("select-state").value;
        let match1 = e.value.match(/^[a-zA-Z ]*/);
        let match2 = e.value.match(/\s*/);
        if (match2[0] === e.value) {
            searchResults.innerHTML = "";
            return;
        }
        if (match1[0] === e.value) {
            fetch('getPlaceName', {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ payload: e.value, state: selectedState })
            }).then(res => res.json()).then(data => {
                let payload = data.payload;
                console.log(payload);
                searchResults.innerHTML = "";
                if (payload.length < 1) {
                    searchResults.innerHTML = "<p>Sorry, nothing found.</p>";
                    return;
                }
                payload.forEach((item, index) => {
                    searchResults.innerHTML += `<p class="placeNameOptions" id="option-${item.placeName}" onclick = "sendPlaceNameValue(this.id)">${item.placeName}</p>`;
                });
            });
            return;
        }
        searchResults.innerHTML = "";
    }


    /* Click and show more infomation*/
    $(".main-info").off().on({
        click: function () {
            this.nextElementSibling.classList.toggle("show");
            this.nextElementSibling.nextElementSibling.classList.toggle("show");
        }
    })



    /* -----------------------------------------------------for map -----------------------------------------------------------------------*/

    let mbAttr = 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, ' +
        'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
        mbUrl = 'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';

    let grayscale = L.tileLayer(mbUrl, { id: 'mapbox/light-v9', tileSize: 512, zoomOffset: -1, attribution: mbAttr }),
        streets = L.tileLayer(mbUrl, { id: 'mapbox/streets-v11', tileSize: 512, zoomOffset: -1, attribution: mbAttr });
    outdoor = L.tileLayer(mbUrl, { id: 'mapbox/outdoors-v9', tileSize: 512, zoomOffset: -1, attribution: mbAttr });
    satellite = L.tileLayer(mbUrl, { id: 'mapbox/satellite-streets-v11', tileSize: 512, zoomOffset: -1, attribution: mbAttr });

    let mymap = L.map('mapid', {
        center: [-25.888834, 134.127603],
        zoom: 4,
        layers: [streets]
    });

    let baseLayers = {
        "Grayscale": grayscale,
        "Streets": streets,
        "Satellite": satellite,
    };

    L.control.layers(baseLayers).addTo(mymap);
    // reset title layer user selection----------------------------------------------
    // store layer which are selected
    $(".leaflet-control-layers-base").mouseout(function () {

        if (mymap.hasLayer(grayscale)) {
            localStorage.setItem("tileLayer", "Grayscale");
        } else if (mymap.hasLayer(streets)) {
            localStorage.setItem("tileLayer", "Streets");
        } else if (mymap.hasLayer(satellite)) {
            localStorage.setItem("tileLayer", "Satellite");
        } else {
            console.error("Not a correct tileLayer");
        }

    });
    // reset layer from store
    let selectedControlLayer = localStorage.getItem("tileLayer");
    if (selectedControlLayer) {
        let layer = null;
        switch (selectedControlLayer) {
            case "Grayscale":
                layer = grayscale;
                break;
            case "Streets":
                layer = streets;
                break;
            case "Satellite":
                layer = satellite;
                break;
            default:
                console.error("Not a correct selection");
        }
        mymap.removeLayer(streets);
        mymap.addLayer(layer);
    }

    // click map and get position -------------------------------
    function onMapClick(e) {
        console.log("You clicked the map at " + e.latlng);
    }

    mymap.on('click', onMapClick);

    // add layer and interation with mouse ----------------------------------------
    /* event of genermal layer for mouseover*/
    function highlightFeature(e) {
        let layer = e.target;
        layer.setStyle({
            fillColor: '#0d6efd',
            weight: 5,
            color: '#0d6efd',
            dashArray: '',
            fillOpacity: 0.7
        });

        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
            layer.bringToFront();
        }
    }
    /* event of detail layer for mouseover*/
    function highLineFeature(e) {
        let layer = e.target;
        layer.setStyle({
            weight: 5,
        });

        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
            layer.bringToFront();
        }
    }
    /* event of genermal layer for mouseout*/
    function resetHighlight(e) {
        geojsonGeneral.resetStyle(e.target);
    }
    /* event of detail layer for mouseout*/
    function resetHighLine(e) {
        geojsonDetail.resetStyle(e.target);
    }

    /* event for click layer*/
    function displayMark(e) {
        let layer = e.target;
        let stateCode = layer.feature.properties.STATE_CODE;
        let selectedState;
        switch (stateCode) {
            case '1':
                selectedState = document.querySelector(`option[value=NSW]`);
                selectedState.selected = true;
                break;
            case '2':
                selectedState = document.querySelector(`option[value=VIC]`);
                selectedState.selected = true;
                break;
            case '3':
                selectedState = document.querySelector(`option[value=QLD]`);
                selectedState.selected = true;
                break;
            case '4':
                selectedState = document.querySelector(`option[value=SA]`);
                selectedState.selected = true;
                break;
            case '5':
                selectedState = document.querySelector(`option[value=WA]`);
                selectedState.selected = true;
                break;
            case '6':
                selectedState = document.querySelector(`option[value=TAS]`);
                selectedState.selected = true;
                break;
            case '7':
                selectedState = document.querySelector(`option[value=NT]`);
                selectedState.selected = true;
                break;
            case '8':
                selectedState = document.querySelector(`option[value=ACT]`);
                selectedState.selected = true;
                break;
            default:
                console.error("No correspond state");

        }
        
        document.querySelector(`input[name="searchCity"]`).value = null;
        document.querySelector(`input[name="searchPlace"]`).value = null;

        document.getElementById("selection").submit();
    }

    /* add listerner for more interaction to map*/
    function layerEvent(feature, layer) {
        layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
            click: displayMark,
        });
    }
    /* add listerner for see more detail on map*/
    function layerEvent2(feature, layer) {
        layer.on({
            mouseover: highLineFeature,
            mouseout: resetHighLine,
            click: displayMark,
        });
    }
    // geojson layer
    let layerGroup = new L.LayerGroup();
    let bounds = null;
    geojsonGeneral = L.geoJson(statesData, {
        style: function (feature) {
            return {
                fillColor: '#0d6efd',
                weight: 1,
                opacity: 1,
                color: '#0d6efd',
                dashArray: '3',
                fillOpacity: 0.3
            };
        },
        onEachFeature: layerEvent
    });

    geojsonDetail = L.geoJson(statesData, {
        style: function (feature) {
            return {
                weight: 1,
                opacity: 1,
                color: '#0d6efd',
                dashArray: '3',
                fillOpacity: 0
            };
        },
        onEachFeature: layerEvent2
    });

    layerGroup.addTo(mymap);
    layerGroup.addLayer(geojsonGeneral);

    // add zoom event for the who map.
    mymap.on("zoomend", function (e) {
        if (bounds) {
            layerGroup.clearLayers();
            layerGroup.addLayer(geojsonDetail);
            if (e.sourceTarget._zoom < mymap.getBoundsZoom(bounds)) {
                layerGroup.clearLayers();
                layerGroup.addLayer(geojsonGeneral);
            }
        } else {
            layerGroup.clearLayers();
            layerGroup.addLayer(geojsonGeneral);
        }
    });

    let level1Icon = L.icon({
        iconUrl: './img/map/level1.png',
        iconSize: [80, 80], // size of the icon
        iconAnchor: [37, 59], // point of the icon which will correspond to marker's location
        popupAnchor: [0, -30] // point from which the popup should open relative to the iconAnchor
    });
    let level2Icon = L.icon({
        iconUrl: './img/map/level2.png',
        iconSize: [80, 80],
        iconAnchor: [37, 59],
        popupAnchor: [0, -30]
    });
    let level3Icon = L.icon({
        iconUrl: './img/map/level3.png',
        iconSize: [80, 80],
        iconAnchor: [37, 59],
        popupAnchor: [0, -30]
    });
    let level4Icon = L.icon({
        iconUrl: './img/map/level4.png',
        iconSize: [80, 80],
        iconAnchor: [37, 59],
        popupAnchor: [0, -30]
    });

    // Add marker to map -------------------------------------------
    setTimeout(() => {
        let results = document.querySelectorAll(".main-info");
        let mainInfo = document.querySelectorAll(".main-title");
        let markers = []
        for (let key in results) {
            if (key == "entries") {
                break;
            }

            let mainData = results[key];
            let detailInfo = results[key].nextElementSibling;
            let detailData = detailInfo.nextElementSibling;

            let latitude = parseFloat(detailData.children[0].innerText.trim());
            let longitude = parseFloat(detailData.children[1].innerText.trim());

            let levelClass = mainData.children[4].classList[1];
            let icon;
            switch (levelClass) {
                case "level1":
                    icon = level1Icon;
                    break;
                case "level2":
                    icon = level2Icon;
                    break;
                case "level3":
                    icon = level3Icon;
                    break;
                case "level4":
                    icon = level4Icon;
                    break;
            }

            let marker = L.marker([latitude, longitude], { icon: icon }).addTo(mymap);

            marker._icon.classList.add(levelClass);
            marker.bindPopup("<div>" + `${$(mainInfo).html().replaceAll('div', 'span')}` + "</div><div>" + `${$(mainData).html().replaceAll('div', 'span')}` + "</div><div>" + `${$(detailInfo).html().replaceAll('div', 'span')}` + "</div><div>" + `${$(detailData).html().replaceAll('div', 'span')}` + "</div>", { minWidth: '800' });
            markers.push(marker);

        }

        if (markers.length != 0) {
            let group = new L.featureGroup(markers);
            bounds = group.getBounds();
            mymap.fitBounds(bounds);
        }
    }, 100)

    function sendCityValue(clicked_id) {
        var city = clicked_id.substring(7);
        document.getElementById("searchCity").value = city;
        document.getElementById("searchResultsCity").innerHTML = "";
    }

    function sendPlaceNameValue(clicked_id) {
        var placeName = clicked_id.substring(7);
        document.getElementById("searchPlace").value = placeName;
        document.getElementById("searchResultsPlaceName").innerHTML = "";
    }



</script>