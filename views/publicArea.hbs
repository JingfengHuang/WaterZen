<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
    integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
    crossorigin="" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
    integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
    crossorigin=""></script>
<script src="/js/au-state.js"></script>
{{!--
<script src="/js/us-states.js"></script> --}}
<link rel="stylesheet" href="/css/public.css">

<h2>Official Data</h2>
<div id="mapid"></div>

<section class="top">

    <form action="/publicArea/basicSearch" method="POST" id="selection">
        <select class="form-select" name="state">
            <option value="null">Select state</option>
            <option value="VIC">Victoria</option>
            <option value="WA">Western Australia</option>
            <option value="NSW">New South Wales</option>
            <option value="TAS">Tasmania</option>
            <option value="ACT">Australian Capital Territory</option>
            <option value="QLD">Queensland</option>
            <option value="SA">South Australia</option>
            <option value="NT">Northern Territory</option>
        </select>
        <p>OR</p>
        <div class="form-group">
            <label for="searchCity" value="null">City/Region: </label>
            <input id="searchCity" class="form-control" name="searchCity" type="text" onkeyup="fetchCity(this)"></input>
        </div>
        <p>OR</p>
        <div class="form-group">
            <label for="searchPlace" value="null">Place name: </label>
            <input id="searchPlace" class="form-control" name="searchPlace" type="text"
                onkeyup="fetchPlaceName(this)"></input>
        </div>
        <section id="searchResultsCity" class="container d-flex flex-column"></section>
        <section id="searchResultsPlaceName" class="container d-flex flex-column"></section>

        <button type="submit">Search</button>

    </form>
    {{#if alert}}
    <p>{{alert}}</p>
    {{/if}}




    <form action="/publicArea/clear" method="GET">
        <button type="submit">Clear</button>
    </form>
</section>

<div class='container'>
    <section class="row">
        {{#if selected}}
        <p> <b>Advanced search: </b>
        </p>
        {{/if}}
    </section>

    <form action="/publicArea/advanceSearch" method="POST" id="order">
        {{#if selected}}
        <span><b>Order by: </b></span>
        <span>
            <label><input onclick="javascript:jump('/publicArea/advanceSearch');" type="radio" name="orderBy"
                    value="city">City/Region</label>
            <label><input onclick="javascript:jump('/publicArea/advanceSearch');" type="radio" name="orderBy"
                    value="name">Place Name</label>
            <label><input onclick="javascript:jump('/publicArea/advanceSearch');" type="radio" name="orderBy"
                    value="quality">Water quality</label>
        </span>
        {{/if}}
    </form>

    <section id="filterLevel">
        {{#if selected}}
        <span><b>Level: </b></span>
        <span>
            <label><input onclick="" type="checkbox" name="level1">Level 1</label>
            <label><input onclick="" type="checkbox" name="level2">Level 2</label>
            <label><input onclick="" type="checkbox" name="level3">Level 3</label>
        </span>
        {{/if}}
    </section>

    {{#if results}}
    <div class="row align-items-center main-title">
        <div class="col">
            State
        </div>
        <div class="col">
            City/Region
        </div>
        <div class="col">
            Place Name
        </div>
        <div class="col">
            Date
        </div>
        <div class="col">
            Level
        </div>
    </div>

    {{#each results}}
    <div class="row align-items-center main-info">
        <div class="col">
            {{state}}
        </div>
        <div class="col">
            {{#if city}}
            {{city}}
            {{else}}
            Unknown
            {{/if}}
        </div>
        <div class="col">
            {{placeName}}
        </div>
        <div class="col">
            {{date}}
        </div>
        <div class="col">
            xxx
        </div>
    </div>
    <div class="row align-items-center detail-info">
        <div class="col latitude">
            Latitude
        </div>
        <div class="col longitude">
            Longitude
        </div>
        <div class="col electricalConductivity">
            Electrical conductivity
        </div>
        <div class="col pH">
            pH
        </div>
        <div class="col temperature">
            Temperature
        </div>
        <div class="col totalDissolvedSolids">
            Total dissolved solids
        </div>
        <div class="col waterTurbidity">
            Water turbidity
        </div>
    </div>
    <div class="row align-items-center detail-info">
        <div class="col latitude">
            {{latitude}}
        </div>
        <div class="col longitude">
            {{longitude}}
        </div>
        <div class="col electricalConductivity">
            {{electricalConductivity}}
        </div>
        <div class="col pH">
            {{pH}}
        </div>
        <div class="col temperature">
            {{temperature}}
        </div>
        <div class="col totalDissolvedSolids">
            {{totalDissolvedSolids}}
        </div>
        <div class="col waterTurbidity">
            {{waterTurbidity}}
        </div>
    </div>
    {{/each}}
    {{/if}}
</div>

<script language="javascript">
    /* -----------------------------------------------------for order -----------------------------------------------------------------------*/

    /* record scroll offset*/
    $(window).scroll(function () {
        if ($(document).scrollTop() != 0) {
            let offset = $(window).scrollTop();
            localStorage.setItem("offsetTop", offset);
        }
    });

    /* to submit form */
    function jump(url) {
        order.action = url;
        order.method = "POST";
        order.submit();
        /*
        // get ordered data, used with res.send(results); in publicAreaController.js
        $.ajax({
            type: "POST",
            data: $('#order').serialize(),
            url: url,
            success: function (data) {
                console.log(data);
                results = data.results
                console.log(results);
            },
            error: function (err) {
                console.log(err.msg);
            }
        })*/
    }

    /* to submit form */
    function jump(url, data) {
        order.action = url;
        order.method = "POST";
        order.submit();
    }

    // scroll to offset
    let offset = localStorage.getItem("offsetTop");

    $("HTML, BODY").animate({
        scrollTop: offset
    }, 0);

    /* -----------------------------------------------------for keep selection -----------------------------------------------------------------------*/

    // restore selected content
    let selected = "{{selected}}";
    if (selected != "") {
        const state = "{{selected.state}}"
        const searchCity = "{{selected.searchCity}}"
        const searchPlace = "{{selected.searchPlace}}"
        const orderBy = "{{selected.orderBy}}"

        if (state != "") {
            let selectedState = document.querySelector(`option[value=${state}]`);
            selectedState.selected = true;
        }

        if (searchCity != "") {
            let selectedCity = document.querySelector(`input[name="searchCity"]`);
            selectedCity.value = searchCity;
        }

        if (searchPlace != "") {
            let selectedCity = document.querySelector(`input[name="searchPlace"]`);
            selectedCity.value = searchPlace;
        }

        if (orderBy != "") {
            let city = document.querySelector('input[value="city"]');
            let placeName = document.querySelector('input[value="name"]');
            let quality = document.querySelector('input[value="quality"]');

            switch (orderBy) {
                case "city":
                    city.checked = true;
                    break;
                case "name":
                    placeName.checked = true;
                    break;
                case "quality":
                    quality.checked = true;
                    break;
            }
        }
    }
    /* -----------------------------------------------------for input hint -----------------------------------------------------------------------*/

    function fetchCity(e) {
        const searchResults = document.getElementById("searchResultsCity");
        let match1 = e.value.match(/^[a-zA-Z ]*/);
        let match2 = e.value.match(/\s*/);
        if (match2[0] === e.value) {
            searchResults.innerHTML = "";
            return;
        }
        if (match1[0] === e.value) {
            fetch('getCity', {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ payload: e.value })
            }).then(res => res.json()).then(data => {
                let payload = data.payload;
                console.log(payload);
                searchResults.innerHTML = "";
                if (payload.length < 1) {
                    searchResults.innerHTML = "<p>Sorry, nothing found.</p>";
                    return;
                }
                payload.forEach((item, index) => {
                    searchResults.innerHTML += `<p class="cityOptions" id="option-${item.city}" onclick = "sendCityValue(this.id)">${item.city}</p>`;
                });
            });
            return;
        }
        searchResults.innerHTML = "";
    }

    function fetchPlaceName(e) {
        const searchResults = document.getElementById("searchResultsPlaceName");
        let match1 = e.value.match(/^[a-zA-Z ]*/);
        let match2 = e.value.match(/\s*/);
        if (match2[0] === e.value) {
            searchResults.innerHTML = "";
            return;
        }
        if (match1[0] === e.value) {
            fetch('getPlaceName', {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ payload: e.value })
            }).then(res => res.json()).then(data => {
                let payload = data.payload;
                console.log(payload);
                searchResults.innerHTML = "";
                if (payload.length < 1) {
                    searchResults.innerHTML = "<p>Sorry, nothing found.</p>";
                    return;
                }
                payload.forEach((item, index) => {
                    searchResults.innerHTML += `<p class="placeNameOptions" id="option-${item.placeName}" onclick = "sendPlaceNameValue(this.id)">${item.placeName}</p>`;
                });
            });
            return;
        }
        searchResults.innerHTML = "";
    }
    
    function sendCityValue(clicked_id) {
        let city = clicked_id.substring(7);
        console.log(city);
        document.getElementById("searchCity").value = city;
    }

    function sendPlaceNameValue(clicked_id) {
        let placeName = clicked_id.substring(7);
        console.log(placeName);
        document.getElementById("searchPlace").value = placeName;
    }
    /* -----------------------------------------------------for show maore information -----------------------------------------------------------------------*/

    /* Click and show more infomation*/
    $(".main-info").off().on({
        click: function () {
            this.nextElementSibling.classList.toggle("show");
            this.nextElementSibling.nextElementSibling.classList.toggle("show");
        }
    })


    /* -----------------------------------------------------for map -----------------------------------------------------------------------*/

    let mbAttr = 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, ' +
        'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
        mbUrl = 'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';

    let grayscale = L.tileLayer(mbUrl, { id: 'mapbox/light-v9', tileSize: 512, zoomOffset: -1, attribution: mbAttr }),
        streets = L.tileLayer(mbUrl, { id: 'mapbox/streets-v11', tileSize: 512, zoomOffset: -1, attribution: mbAttr });
    outdoor = L.tileLayer(mbUrl, { id: 'mapbox/outdoors-v9', tileSize: 512, zoomOffset: -1, attribution: mbAttr });
    satellite = L.tileLayer(mbUrl, { id: 'mapbox/satellite-streets-v11', tileSize: 512, zoomOffset: -1, attribution: mbAttr });

    let mymap = L.map('mapid', {
        center: [-25.888834, 134.127603],
        zoom: 4,
        layers: [streets]
    });

    let baseLayers = {
        "Grayscale": grayscale,
        "Streets": streets,
        "Satellite": satellite,
    };

    L.control.layers(baseLayers).addTo(mymap);
    // reset title layer user selection----------------------------------------------
    // store layer which are selected
    $(".leaflet-control-layers-base").mouseout(function () {

        if (mymap.hasLayer(grayscale)) {
            localStorage.setItem("tileLayer", "Grayscale");
        } else if (mymap.hasLayer(streets)) {
            localStorage.setItem("tileLayer", "Streets");
        }  else if (mymap.hasLayer(satellite)) {
            localStorage.setItem("tileLayer", "Satellite");
        } else {
            console.error("Not a correct tileLayer");
        }

    });
    // reset layer from store
    let selectedControlLayer = localStorage.getItem("tileLayer");
    if (selectedControlLayer) {
        let layer = null;
        switch (selectedControlLayer) {
            case "Grayscale":
                layer = grayscale;
                break;
            case "Streets":
                layer = streets;
                break;
            case "Satellite":
                layer = satellite;
                break;
            default:
                console.error("Not a correct selection");
        }
        mymap.removeLayer(streets);
        mymap.addLayer(layer);
    }

    // click map and get position -------------------------------
    function onMapClick(e) {
        console.log("You clicked the map at " + e.latlng);
    }

    mymap.on('click', onMapClick);

    // add layer and interation with mouse ----------------------------------------
    /* event of genermal layer for mouseover*/
    function highlightFeature(e) {
        let layer = e.target;
        layer.setStyle({
            fillColor: '#0d6efd',
            weight: 5,
            color: '#0d6efd',
            dashArray: '',
            fillOpacity: 0.7
        });

        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
            layer.bringToFront();
        }
    }
    /* event of detail layer for mouseover*/
    function highLineFeature(e) {
        let layer = e.target;
        layer.setStyle({
            weight: 5,
        });

        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
            layer.bringToFront();
        }
    }
    /* event of genermal layer for mouseout*/
    function resetHighlight(e) {
        geojsonGeneral.resetStyle(e.target);
    }
    /* event of detail layer for mouseout*/
    function resetHighLine(e) {
        geojsonDetail.resetStyle(e.target);
    }

    /* event for click layer*/
    function displayMark(e) {
        let layer = e.target;
        let stateCode = layer.feature.properties.STATE_CODE;
        let selectedState;
        switch (stateCode) {
            case '1':
                selectedState = document.querySelector(`option[value=NSW]`);
                selectedState.selected = true;
                break;
            case '2':
                selectedState = document.querySelector(`option[value=VIC]`);
                selectedState.selected = true;
                break;
            case '3':
                selectedState = document.querySelector(`option[value=QLD]`);
                selectedState.selected = true;
                break;
            case '4':
                selectedState = document.querySelector(`option[value=SA]`);
                selectedState.selected = true;
                break;
            case '5':
                selectedState = document.querySelector(`option[value=WA]`);
                selectedState.selected = true;
                break;
            case '6':
                selectedState = document.querySelector(`option[value=TAS]`);
                selectedState.selected = true;
                break;
            case '7':
                selectedState = document.querySelector(`option[value=NT]`);
                selectedState.selected = true;
                break;
            case '8':
                selectedState = document.querySelector(`option[value=ACT]`);
                selectedState.selected = true;
                break;
            default:
                console.error("No correspond state");

        }
        document.getElementById("selection").submit();
    }

    /* add listerner for more interaction to map*/
    function layerEvent(feature, layer) {
        layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
            click: displayMark,
        });
    }
    /* add listerner for see more detail on map*/
    function layerEvent2(feature, layer) {
        layer.on({
            mouseover: highLineFeature,
            mouseout: resetHighLine,
            click: displayMark,
        });
    }
    // geojson layer
    let layerGroup = new L.LayerGroup();
    let bounds = null;
    geojsonGeneral = L.geoJson(statesData, {
        style: function (feature) {
            return {
                fillColor: '#0d6efd',
                weight: 1,
                opacity: 1,
                color: '#0d6efd',
                dashArray: '3',
                fillOpacity: 0.3
            };
        },
        onEachFeature: layerEvent
    });

    geojsonDetail = L.geoJson(statesData, {
        style: function (feature) {
            return {
                weight: 1,
                opacity: 1,
                color: '#0d6efd',
                dashArray: '3',
                fillOpacity: 0
            };
        },
        onEachFeature: layerEvent2
    });

    layerGroup.addTo(mymap);
    layerGroup.addLayer(geojsonGeneral);

    // add zoom event for the who map.
    mymap.on("zoomend", function (e) {
        if (bounds) {
            layerGroup.clearLayers();
            layerGroup.addLayer(geojsonDetail);
            if (e.sourceTarget._zoom < mymap.getBoundsZoom(bounds)) {
                layerGroup.clearLayers();
                layerGroup.addLayer(geojsonGeneral);
            }
        } else {
            layerGroup.clearLayers();
            layerGroup.addLayer(geojsonGeneral);
        }
    });

    // Add marker to map -------------------------------------------
    setTimeout(() => {
        let results = document.querySelectorAll(".main-info");
        let mainInfo = document.querySelectorAll(".main-title");
        let markers = []
        for (let key in results) {
            if (key == "entries") {
                break;
            }

            let mainData = results[key];
            let detailInfo = results[key].nextElementSibling;
            let detailData = detailInfo.nextElementSibling;

            let latitude = parseFloat(detailData.children[0].innerText.trim());
            let longitude = parseFloat(detailData.children[1].innerText.trim());

            let marker = L.marker([latitude, longitude]).addTo(mymap);
            marker.bindPopup("<div>" + `${$(mainInfo).html().replaceAll('div', 'span')}` + "</div><div>" + `${$(mainData).html().replaceAll('div', 'span')}` + "</div><div>" + `${$(detailInfo).html().replaceAll('div', 'span')}` + "</div><div>" + `${$(detailData).html().replaceAll('div', 'span')}` + "</div>", { minWidth: '800' });
            markers.push(marker);

        }

        if (markers.length != 0) {
            let group = new L.featureGroup(markers);
            bounds = group.getBounds();
            mymap.fitBounds(bounds);
        }
    }, 100)


</script>